trigger:
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - '*.yml'

pool:
  vmImage: 'windows-latest'

steps:
- task: PowerShell@2
  displayName: "Copy Changed Files"
  inputs:
    targetType: 'inline'
    script: |
      $sourceDir = "$(Build.SourcesDirectory)"
      $destDir = "$(Build.ArtifactStagingDirectory)/changed-files"
      
      # Create artifacts directory
      New-Item -Path $destDir -ItemType Directory -Force
      
      # Get the commit SHA
      $commitSha = "$(Build.SourceVersion)"
      Write-Host "Analyzing commit: $commitSha"
      
      # Move to the source directory where the repo is cloned
      Push-Location $sourceDir
      
      try {
          # Get previous commit
          $previousCommitSha = git rev-parse "$commitSha^"
          Write-Host "Previous commit: $previousCommitSha"
          
          # Get changed files between commits
          $changedFiles = git diff --name-only $previousCommitSha $commitSha
          
          # Echo list of changed files
          Write-Host "======= CHANGED FILES LIST ======="
          foreach ($file in $changedFiles) {
              Write-Host $file
          }
          Write-Host "=================================="
          
          $fileCount = 0
          $copiedFiles = @()
          
          foreach ($file in $changedFiles) {
              $fileCount++
              Write-Host ".....Processing Changed File: $file"
              
              # Convert forward slashes to backslashes for Windows paths
              $filePath = $file.Replace("/", "\")
              $path = Split-Path -Path $filePath
              
              # Create directory structure
              if ($path) {
                  $targetDir = "$destDir\$path"
                  Write-Host "Creating directory: $targetDir"
                  if (!(Test-Path -Path $targetDir)) {
                      New-Item -Path $targetDir -ItemType Directory -Force
                  }
              } else {
                  $targetDir = $destDir
              }
              
              # Copy the file
              $sourceFile = "$sourceDir\$file"
              $destinationFile = "$targetDir\$(Split-Path -Path $file -Leaf)"
              
              if (Test-Path -Path $sourceFile -PathType Leaf) {
                  Write-Host "Copying File: $sourceFile to $destinationFile"
                  try {
                      Copy-Item -Path $sourceFile -Destination $destinationFile -Force
                      if (Test-Path -Path $destinationFile -PathType Leaf) {
                          Write-Host "Successfully copied to $destinationFile" -ForegroundColor Green
                          $copiedFiles += $destinationFile
                      } else {
                          Write-Host "Failed to copy to $destinationFile - file doesn't exist after copy" -ForegroundColor Red
                      }
                  } catch {
                      Write-Host "Error copying file: $_" -ForegroundColor Red
                  }
              } else {
                  Write-Host "Source file not found: $sourceFile" -ForegroundColor Yellow
              }
          }
          
          # List all files in the destination directory
          Write-Host "======= FILES IN DESTINATION DIRECTORY ======="
          if (Test-Path -Path $destDir) {
              $allDestFiles = Get-ChildItem -Path $destDir -Recurse -File | Select-Object -ExpandProperty FullName
              foreach ($file in $allDestFiles) {
                  Write-Host $file
              }
              Write-Host "Total files found in destination: $($allDestFiles.Count)"
          } else {
              Write-Host "Destination directory does not exist" -ForegroundColor Red
          }
          Write-Host "=============================================="
          
          # Create a summary file
          $summaryFile = "$destDir\change-summary.md"
          "# Changes in commit $commitSha" | Out-File -FilePath $summaryFile
          "## Previous commit: $previousCommitSha" | Out-File -FilePath $summaryFile -Append
          "## Total files changed: $fileCount" | Out-File -FilePath $summaryFile -Append
          "" | Out-File -FilePath $summaryFile -Append
          "## Changed Files:" | Out-File -FilePath $summaryFile -Append
          foreach ($file in $changedFiles) {
              "- $file" | Out-File -FilePath $summaryFile -Append
          }
          
          "" | Out-File -FilePath $summaryFile -Append
          "## Copied Files:" | Out-File -FilePath $summaryFile -Append
          foreach ($file in $copiedFiles) {
              "- $file" | Out-File -FilePath $summaryFile -Append
          }
          
          Write-Host "Total files copied: $($copiedFiles.Count)" -ForegroundColor Green
          
          if ($fileCount -eq 0) {
              Write-Host "No files were changed in this commit." -ForegroundColor Yellow
              Write-Host "##vso[task.logissue type=warning]No files were changed in this commit."
          }
      }
      catch {
          $ErrorMessage = $_.Exception.Message
          Write-Error "Exception: $ErrorMessage occurred while executing the script."
          Write-Host "##vso[task.logissue type=error]$ErrorMessage"
      }
      finally {
          # Go back to the original location
          Pop-Location
      }
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Changed Files'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/changed-files'
    ArtifactName: 'changed-files-$(Build.SourceVersion)'
    publishLocation: 'Container'
