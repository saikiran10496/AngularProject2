trigger:
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - '*.yml'

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self
  fetchDepth: 0  # This is important to get the commit history

- task: PowerShell@2
  displayName: "Copy Changed Files"
  inputs:
    targetType: 'inline'
    script: |
      $sourceDir = "$(Build.SourcesDirectory)"
      $destDir = "$(Build.ArtifactStagingDirectory)/changed-files"
      
      # Create artifacts directory
      New-Item -Path $destDir -ItemType Directory -Force
      
      # Get the commit SHA and parent commit
      $commitSha = "$(Build.SourceVersion)"
      Write-Host "Current commit: $commitSha"
      
      # Get the parent commit SHA
      $parentCommitSha = git rev-parse "$commitSha^"
      Write-Host "Parent commit: $parentCommitSha"
      
      # Get changed files using git diff
      $changedFiles = git diff --name-only $parentCommitSha $commitSha
      if ($LASTEXITCODE -ne 0) {
          Write-Host "Falling back to first commit comparison..."
          $firstCommit = git rev-list --max-parents=0 HEAD
          $changedFiles = git diff --name-only $firstCommit $commitSha
      }
      
      # Echo list of changed files
      Write-Host "======= CHANGED FILES LIST ======="
      foreach ($file in $changedFiles) {
          Write-Host $file
      }
      Write-Host "=================================="
      
      $fileCount = 0
      $copiedFiles = @()
      
      foreach ($file in $changedFiles) {
          $fileCount++
          Write-Host ".....Processing Changed File: $file"
          
          # Convert forward slashes to backslashes for Windows paths
          $filePath = $file.Replace("/", "\")
          $path = Split-Path -Path $filePath
          
          # Create directory structure
          if ($path) {
              $targetDir = "$destDir\$path"
              Write-Host "Creating directory: $targetDir"
              if (!(Test-Path -Path $targetDir)) {
                  New-Item -Path $targetDir -ItemType Directory -Force
              }
          } else {
              $targetDir = $destDir
          }
          
          # Copy the file
          $sourceFile = "$sourceDir\$file"
          $destinationFile = "$targetDir\$(Split-Path -Path $file -Leaf)"
          
          if (Test-Path -Path $sourceFile -PathType Leaf) {
              Write-Host "Copying File: $sourceFile to $destinationFile"
              try {
                  Copy-Item -Path $sourceFile -Destination $destinationFile -Force
                  if (Test-Path -Path $destinationFile -PathType Leaf) {
                      Write-Host "Successfully copied to $destinationFile" -ForegroundColor Green
                      $copiedFiles += $destinationFile
                  } else {
                      Write-Host "Failed to copy to $destinationFile - file doesn't exist after copy" -ForegroundColor Red
                  }
              } catch {
                  Write-Host "Error copying file: $_" -ForegroundColor Red
              }
          } else {
              Write-Host "Source file not found: $sourceFile" -ForegroundColor Yellow
          }
      }
      
      # List all files in the destination directory
      Write-Host "======= FILES IN DESTINATION DIRECTORY ======="
      if (Test-Path -Path $destDir) {
          $allDestFiles = Get-ChildItem -Path $destDir -Recurse -File | Select-Object -ExpandProperty FullName
          foreach ($file in $allDestFiles) {
              Write-Host $file
          }
          Write-Host "Total files found in destination: $($allDestFiles.Count)"
      } else {
          Write-Host "Destination directory does not exist" -ForegroundColor Red
      }
      Write-Host "=============================================="
      
      # Create a summary file
      $summaryFile = "$destDir\change-summary.md"
      "# Changes in commit $commitSha" | Out-File -FilePath $summaryFile
      "## Parent commit: $parentCommitSha" | Out-File -FilePath $summaryFile -Append
      "## Total files changed: $fileCount" | Out-File -FilePath $summaryFile -Append
      "" | Out-File -FilePath $summaryFile -Append
      "## Changed Files:" | Out-File -FilePath $summaryFile -Append
      foreach ($file in $changedFiles) {
          "- $file" | Out-File -FilePath $summaryFile -Append
      }
      
      "" | Out-File -FilePath $summaryFile -Append
      "## Copied Files:" | Out-File -FilePath $summaryFile -Append
      foreach ($file in $copiedFiles) {
          "- $file" | Out-File -FilePath $summaryFile -Append
      }
      
      Write-Host "Total files copied: $($copiedFiles.Count)" -ForegroundColor Green
      
      if ($fileCount -eq 0) {
          Write-Host "No files were changed in this commit." -ForegroundColor Yellow
          Write-Host "##vso[task.logissue type=warning]No files were changed in this commit."
      }

- task: PublishBuildArtifacts@1
  displayName: 'Publish Changed Files'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/changed-files'
    ArtifactName: 'changed-files-$(Build.SourceVersion)'
    publishLocation: 'Container'
