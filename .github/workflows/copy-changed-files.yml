name: Copy Changed Files

on:
  workflow_dispatch:
    inputs:
      commit_id:
        description: 'Commit ID to analyze (defaults to latest)'
        required: false
        default: ''
  push:
    branches:
      - master
      - develop

jobs:
  copy-changed-files:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Copy Changed Files
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_ID: ${{ github.event.inputs.commit_id || github.sha }}
        run: |
          $sourceDir = "${{ github.workspace }}"
          $destDir = "${{ github.workspace }}/changed-files"
          $flatDir = "${{ github.workspace }}/changed-files/all-files-flat"
          
          # Create artifacts directories
          New-Item -Path $destDir -ItemType Directory -Force
          New-Item -Path $flatDir -ItemType Directory -Force
          
          # Get the commit SHA
          $commitSha = "$env:COMMIT_ID"
          Write-Host "Analyzing commit: $commitSha"
          
          # Get previous commit
          $previousCommitSha = git rev-parse "$commitSha^"
          Write-Host "Previous commit: $previousCommitSha"
          
          # Get changed files between commits
          $changedFiles = git diff --name-only $previousCommitSha $commitSha
          
          # Echo list of changed files
          Write-Host "======= CHANGED FILES LIST ======="
          foreach ($file in $changedFiles) {
            Write-Host $file
          }
          Write-Host "=================================="
          
          $fileCount = 0
          $copiedFiles = @()
          
          foreach ($file in $changedFiles) {
            $fileCount++
            Write-Host ".....Processing Changed File: $file"
            
            # Get the filename without path
            $fileName = Split-Path -Path $file -Leaf
            
            # Convert forward slashes to backslashes for Windows paths
            $filePath = $file.Replace("/", "\")
            $path = Split-Path -Path $filePath
            
            # Create directory structure for maintaining original structure
            if ($path) {
              $targetDir = "$destDir\$path"
              Write-Host "Creating directory: $targetDir"
              if (!(Test-Path -Path $targetDir)) {
                New-Item -Path $targetDir -ItemType Directory -Force
              }
            } else {
              $targetDir = $destDir
            }
            
            # Copy the file to original structure
            $sourceFile = "$sourceDir\$file"
            $destinationFile = "$targetDir\$fileName"
            
            if (Test-Path -Path $sourceFile -PathType Leaf) {
              Write-Host "Copying File: $sourceFile to $destinationFile"
              try {
                Copy-Item -Path $sourceFile -Destination $destinationFile -Force
                if (Test-Path -Path $destinationFile -PathType Leaf) {
                  Write-Host "Successfully copied to $destinationFile" -ForegroundColor Green
                  $copiedFiles += $destinationFile
                  
                  # Also copy to flat directory with a unique name
                  $flatFileName = if ($path) { "$($path.Replace('\', '-'))-$fileName" } else { $fileName }
                  $flatDestFile = "$flatDir\$flatFileName"
                  Copy-Item -Path $sourceFile -Destination $flatDestFile -Force
                  Write-Host "Also copied to flat directory as: $flatDestFile" -ForegroundColor Green
                } else {
                  Write-Host "Failed to copy to $destinationFile - file doesn't exist after copy" -ForegroundColor Red
                }
              } catch {
                Write-Host "Error copying file: $_" -ForegroundColor Red
              }
            } else {
              Write-Host "Source file not found: $sourceFile" -ForegroundColor Yellow
            }
          }
          
          # List all files in the destination directory
          Write-Host "======= FILES IN DESTINATION DIRECTORY ======="
          if (Test-Path -Path $destDir) {
            $allDestFiles = Get-ChildItem -Path $destDir -Recurse -File | Select-Object -ExpandProperty FullName
            foreach ($file in $allDestFiles) {
              Write-Host $file
            }
            Write-Host "Total files found in destination: $($allDestFiles.Count)"
          } else {
            Write-Host "Destination directory does not exist" -ForegroundColor Red
          }
          Write-Host "=============================================="
          
          # Create a summary file
          $summaryFile = "$destDir\change-summary.md"
          "# Changes in commit $commitSha" | Out-File -FilePath $summaryFile
          "## Previous commit: $previousCommitSha" | Out-File -FilePath $summaryFile -Append
          "## Total files changed: $fileCount" | Out-File -FilePath $summaryFile -Append
          "" | Out-File -FilePath $summaryFile -Append
          "## Changed Files:" | Out-File -FilePath $summaryFile -Append
          foreach ($file in $changedFiles) {
            "- $file" | Out-File -FilePath $summaryFile -Append
          }
          
          "" | Out-File -FilePath $summaryFile -Append
          "## Files in Artifact:" | Out-File -FilePath $summaryFile -Append
          "The changed files are available in this artifact in two locations:" | Out-File -FilePath $summaryFile -Append
          "1. In their original directory structure" | Out-File -FilePath $summaryFile -Append
          "2. In a flat directory at `all-files-flat/` for easier access" | Out-File -FilePath $summaryFile -Append
          
          Write-Host "Total files copied: $($copiedFiles.Count)" -ForegroundColor Green
          
          if ($fileCount -eq 0) {
            Write-Host "No files were changed in this commit." -ForegroundColor Yellow
          }
      
      - name: Upload Changed Files Artifact
        uses: actions/upload-artifact@v4
        with:
          name: changed-files-${{ github.sha }}
          path: ${{ github.workspace }}/changed-files/
          if-no-files-found: warn
          retention-days: 30

      - name: Add Job Summary
        shell: pwsh
        run: |
          $summaryFile = "${{ github.workspace }}/changed-files/change-summary.md"
          
          if (Test-Path -Path $summaryFile -PathType Leaf) {
            $content = Get-Content -Path $summaryFile -Raw
            
            # Output to job summary
            $content | Out-File -FilePath $env:GITHUB_STEP_SUMMARY
          } else {
            Write-Output "## No files were changed in this commit" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY
          }
